package org.cmoran
package pipelines

import zio.stream.ZPipeline

case class ContainerEntity(val fromSeed: Int, val tagValue: String, val tagType: ContainerType) {
  override def toString = s"ContainerEntity($tagValue, ${tagType.name}) :: GENERATED BY :: $fromSeed"
}

object ContainerEntity {

  val tagPipe: ZPipeline[Any, Nothing, Int, ContainerEntity] = ZPipeline.map(fromInt)

  def fromInt(seed: Int): ContainerEntity = ContainerEntity(seed, RandomPhrase.fromInt(seed).value, ContainerType.fromInt(seed))

}

sealed trait ContainerType {
  val name: String = "UNKNOWN"
}

object ContainerType {

  case object CoolContainer extends ContainerType {
    override val name = "COOL"
  }

  case object ShiteContainer extends ContainerType {
    override val name = "SHITE"
  }

  def fromInt(seed: Int): ContainerType = if (seed % 2 == 0) CoolContainer else ShiteContainer

}
